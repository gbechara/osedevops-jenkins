<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.2">
    <actions/>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties/>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.2">
        <script>node {
            stage &apos;Build image and deploy in Dev&apos;
            echo &apos;Building docker image and deploying to Dev&apos;
            buildTicketMonster(&apos;development&apos;)
            
            stage &apos;Wait for approval&apos;
            input &apos;Approve to testing?&apos;
            
            stage &apos;Deploy to testing&apos;
            echo &apos;Deploying to testing&apos;
            deployTicketMonster(&apos;development&apos;, &apos;testing&apos;)
            }
            // Creates a Build and triggers it
            def buildTicketMonster(String project){
            projectSet(project)
            sh &quot;oc new-build --binary --name=eap-app -l app=eap-app || echo &apos;Build exists&apos;&quot;
            sh &quot;oc start-build eap-app&quot;
            appDeploy()
            }
            
            // Tag the ImageStream from an original project to force a deployment
            def deployTicketMonster(String origProject, String project){
            projectSet(project)
            sh &quot;oc policy add-role-to-user system:image-puller system:serviceaccount:${project}:default -n ${origProject}&quot;
            sh &quot;oc tag ${origProject}/eap-app:latest ${project}/eap-app:latest&quot;
            appDeploy()
            }
            
            // Login and set the project
            def projectSet(String project){
            //Use a credential called openshift-dev
            withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;dev1&apos;, usernameVariable: &apos;USERNAME&apos;, passwordVariable: &apos;PASSWORD&apos;]]) {
            sh &quot;oc login --insecure-skip-tls-verify=true -u $env.USERNAME -p $env.PASSWORD https://10.1.2.2:8443&quot;
            }
            sh &quot;oc new-project ${project} || echo &apos;Project exists&apos;&quot;
            sh &quot;oc project ${project}&quot;
            }
            
            // Deploy the project based on a existing ImageStream
            def appDeploy(){
            sh &quot;oc new-app aloha -l app=aloha,hystrix.enabled=true || echo &apos;Aplication already Exists&apos;&quot;
            sh &quot;oc expose service aloha || echo &apos;Service already exposed&apos;&quot;
            sh &apos;oc patch dc/aloha -p \&apos;{&quot;spec&quot;:{&quot;template&quot;:{&quot;spec&quot;:{&quot;containers&quot;:[{&quot;name&quot;:&quot;aloha&quot;,&quot;ports&quot;:[{&quot;containerPort&quot;: 8778,&quot;name&quot;:&quot;jolokia&quot;}]}]}}}}\&apos;&apos;
            sh &apos;oc patch dc/aloha -p \&apos;{&quot;spec&quot;:{&quot;template&quot;:{&quot;spec&quot;:{&quot;containers&quot;:[{&quot;name&quot;:&quot;aloha&quot;,&quot;readinessProbe&quot;:{&quot;httpGet&quot;:{&quot;path&quot;:&quot;/api/health&quot;,&quot;port&quot;:8080}}}]}}}}\&apos;&apos;
            }
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
</flow-definition>